# We could use `@actions-rs/cargo` Action ability to automatically install `cross` tool
# in order to compile our application for some unusual targets.

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create release and cross-compile release artifacts

jobs:
  build-linux:
    name: Build (linux,win)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/typescript-to-gdscript*

  build-mac:
    name: Build (mac)
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
    steps:
      # exactly the same as the previous step but we can't use yaml anchors T_T
      # https://github.com/actions/runner/issues/1182
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/typescript-to-gdscript*

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - build-mac
      - build-linux
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: Write release url
        run: |
          echo {{ steps.create_release.outputs.upload_url }} > release-url.txt
      - name: Upload release url
        uses: actions/upload-artifact@v3
        with:
          name: release-url.txt
          path: release-url.txt
  upload-release:
    name: Upload Release Artifact
    runs-on: ubuntu-latest
    needs:
      - create-release
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - aarch64-apple-darwin
          - x86_64-apple-darwin
    steps:
      - name: Download release url
        uses: actions/download-artifact@v3
        with:
          name: release-url.txt
      - name: Download artifact ${{ matrix.target }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}
      - name: Compress ${{ matrix.target }}
        run: |
          zip -r ${{ matrix.target }}.zip ${{ matrix.target }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ matrix.target }}.zip
          asset_name: ${{ matrix.target}}.zip
          asset_content_type: application/zip
