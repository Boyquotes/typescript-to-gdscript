extends Reference
# Generated by typescript-to-gdscript. Do not edit by hand!
# You can extend this in another class to override behaviors
{{ if comment -}}
# {comment}
{{ endif -}}
{{ for import in imports -}}
const {import.name} = preload("{{ if import.gd_impl }}.{{ endif }}./{import.src}")
{{ endfor }}
{{ for enum in enums -}}
enum {enum.name} \{
    {{ for m in enum.members }}{m.name} = {m.value}{{ if not @last }},
    {{ endif }}{{ endfor }}
}
{{ endfor }}
var __assigned_properties = \{}
var __initialized = false

{{ for var_decl in vars -}}
{{ if var_decl.comment -}}
# {var_decl.comment}
{{ endif -}}
var {var_decl.name}: {var_decl.decl_type}{{ if var_decl.decl_init }} = {var_decl.decl_init} {{ endif }}
{{ endfor -}}

func _init(src: { src_type.name } {{if src_type.init }}= {src_type.init}{{ endif }}) -> void:
    update(src)

func update(src: { src_type.name }) -> void:
    # custom import logic can be added by overriding this function

    __initialized = __initialized || len(src) > 0
{# TODO: this is uuuuugly, find some way to template this part? the main challenges are-#}
{#- a: no way to know the name of the parameter we are assigning from ('src' in this template) -#}
{#- b: no way to know whether we should use tabs or spaces... or what indentation we want for newlines -#}
{{- for var_init in vars -}}
{{- if var_init.collection }}
{{- if var_init.collection.is_array -}}
{{- if var_init.optional }}
    if '{var_init.src_name}' in src:{{endif}}
{{ if var_init.optional}}    {{ endif }}    __assigned_properties.{var_init.name} = true
{{ if var_init.optional}}    {{ endif }}    {var_init.name} = {var_init.collection.init}
{{ if var_init.optional}}    {{ endif }}    for __item__ in src.{var_init.src_name}:
{{ if var_init.optional}}    {{ endif }}        var __value__ = {var_init.ctor.start}__item__{var_init.ctor.end}
                                                {{-if var_init.ctor.suffix}}__item__{var_init.ctor.suffix}{{endif}}
{{ if var_init.optional}}    {{ endif }}        {var_init.name}.append(__value__)

{{- endif }}{# is_array #}
{{- if var_init.collection.is_dict -}}
{{- if var_init.optional }}
    if '{var_init.src_name}' in src:{{endif}}
    {{ if var_init.optional}}    {{ endif }}__assigned_properties.{var_init.name} = true
    {{ if var_init.optional}}    {{ endif }}{var_init.name} = {var_init.collection.init}
    {{ if var_init.optional}}    {{ endif }}for __key__ in src.{var_init.src_name}:
    {{ if var_init.optional}}    {{ endif }}    var __value__ = src.{var_init.src_name}[__key__]
    {{ if var_init.optional}}    {{ endif }}    {var_init.name}[__key__] = {var_init.ctor.start}__value__{var_init.ctor.end}
                                                {{-if var_init.ctor.suffix}}__value__{var_init.ctor.suffix}{{endif}}
{{ endif }}{# is_dict -#}
{{- else -}}{#- var_init.collection #}
{{ if var_init.optional }}    if '{var_init.src_name}' in src:
{{endif-}}
{{ if var_init.optional}}    {{ endif }}    __assigned_properties.{var_init.name} = true
{{ if var_init.optional}}    {{ endif }}    {var_init.name} = {var_init.ctor.start}src.{var_init.src_name}{var_init.ctor.end}
        {{-if var_init.ctor.suffix}}src.{var_init.src_name}{var_init.ctor.suffix}{{endif}}

{{ endif -}}{#- var_init.collection -#}
{{- endfor }}

func for_json() -> Dictionary:
    # custom logic to serialize to dict/array/primitive for json
    var result = \{}
    if !__initialized:
        return result
{{ for var_init in vars -}}
{{- if var_init.collection }}
{{- if var_init.collection.is_array -}}
{{- if var_init.optional }}
    if '{var_init.src_name}' in __assigned_properties:{{endif}}
    {{ if var_init.optional}}    {{ endif }}result.{var_init.name} = {var_init.collection.init}
    {{ if var_init.optional}}    {{ endif }}for __item__ in {var_init.src_name}:
    {{ if var_init.optional}}    {{ endif }}    var __value__ = {var_init.for_json.start}__item__{var_init.for_json.end}
                                                {{-if var_init.for_json.suffix}}__item__{var_init.for_json.suffix}{{endif}}
    {{ if var_init.optional}}    {{ endif }}    result.{var_init.name}.append(__value__)

{{- endif }}{# is_array #}
{{- if var_init.collection.is_dict -}}
{{- if var_init.optional }}
    if '{var_init.src_name}' in __assigned_properties:{{endif}}
    {{ if var_init.optional}}    {{ endif }}result.{var_init.name} = {var_init.collection.init}
    {{ if var_init.optional}}    {{ endif }}for __key__ in {var_init.src_name}:
    {{ if var_init.optional}}    {{ endif }}    var __value__ = {var_init.src_name}[__key__]
    {{ if var_init.optional}}    {{ endif }}    result.{var_init.name}[__key__] = {var_init.for_json.start}__value__{var_init.for_json.end}
                                                {{-if var_init.for_json.suffix}}__value__{var_init.for_json.suffix}{{endif}}
{{ endif }}{# is_dict -#}
{{- else -}}{#- var_init.collection #}
    {{ if var_init.optional }}if '{var_init.src_name}' in __assigned_properties: {{endif-}}
    result.{var_init.name} = {var_init.for_json.start}{var_init.src_name}{var_init.for_json.end}
        {{-if var_init.for_json.suffix}}__item__{var_init.for_json.suffix}{{endif}}

{{ endif -}}{#- var_init.collection -#}
{{- endfor }}
    return result

# Checks to see whether an optional property has been assigned or not.
# Works for non-optional properties too though if update() has been called
# then they should always be true.
func is_set(property_name: String) -> bool:
    return __initialized && property_name in __assigned_properties

# True if update() has been called
func is_initialized() -> bool:
    return __initialized
